// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/sonal-chauhan/aws-load-balancer-controller/pkg/networking (interfaces: SecurityGroupResolver)

// Package networking is a generated GoMock package.
package networking

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockSecurityGroupResolver is a mock of SecurityGroupResolver interface.
type MockSecurityGroupResolver struct {
	ctrl     *gomock.Controller
	recorder *MockSecurityGroupResolverMockRecorder
}

// MockSecurityGroupResolverMockRecorder is the mock recorder for MockSecurityGroupResolver.
type MockSecurityGroupResolverMockRecorder struct {
	mock *MockSecurityGroupResolver
}

// NewMockSecurityGroupResolver creates a new mock instance.
func NewMockSecurityGroupResolver(ctrl *gomock.Controller) *MockSecurityGroupResolver {
	mock := &MockSecurityGroupResolver{ctrl: ctrl}
	mock.recorder = &MockSecurityGroupResolverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSecurityGroupResolver) EXPECT() *MockSecurityGroupResolverMockRecorder {
	return m.recorder
}

// ResolveViaNameOrID mocks base method.
func (m *MockSecurityGroupResolver) ResolveViaNameOrID(arg0 context.Context, arg1 []string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveViaNameOrID", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResolveViaNameOrID indicates an expected call of ResolveViaNameOrID.
func (mr *MockSecurityGroupResolverMockRecorder) ResolveViaNameOrID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveViaNameOrID", reflect.TypeOf((*MockSecurityGroupResolver)(nil).ResolveViaNameOrID), arg0, arg1)
}
